{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Tactics","text":"Initial Access Execution Persistence Privilege Escalation Defense Evasion Credential Access Discovery Lateral Movement Collection Impact Using cloud credentials Exec into container Backdoor container Privileged container Clear container logs List K8S secrets Access Kubernetes API server Access cloud resources Images from a private registry Data destruction Compromised image In registry bash/cmd inside container Writable hostPath mount Cluster-admin binding Delete K8S events Mount service principal Access Kubelet API Container service account Collecting data from pod Resource hijacking Kubeconfig file New container Kubernetes CronJob hostPath mount Pod / container name similarity Container service account Network mapping Cluster internal networking Denial of service Application vulnerability Application exploit (RCE) Malicious admission controller Access cloud resources Connect from proxy server Application credentials in configuration files Exposed sensitive interfaces Application credentials in configuration files Exposed sensitive interfaces SSH server running inside container Container service account Access managed identity credentials Instance Metadata API Writable hostPath mount Sidecar injection Static pods Malicious admission controller CoreDNS poisoning ARP poisoning and IP spoofing Disclaimer <p>The purpose of the Threat Matrix for Kubernetes is to educate readers on the potential of Kubernetes-based tactics, techniques, and procedures (TTPs). It is not to teach how to weaponize or specifically abuse them.</p>"},{"location":"about/","title":"About","text":"<p>The purpose of the threat matrix for Kubernetes is to conceptualize the known tactics, techniques, and procedures (TTP) that adversaries may use against Kubernetes environments. Inspired from MITRE ATT&amp;CK, the threat matrix for Kubernetes is designed to give quick insight into a potential TTP that an adversary may be using in their attack campaign. The threat matrix for Kubernetes contains also mitigations specific to Kubernetes environments and attack techniques.</p> <p></p>"},{"location":"about/#acknowledgments","title":"Acknowledgments","text":"<p>The threat matrix for Kubernetes is created by Yossi Weizman, Dotan Patrich and Ram Pliskin of the Microsoft Defender for Cloud team. </p> <p>MITRE ATT&amp;CK \u00a9 2021 The MITRE Corporation - This work is reproduced and distributed with the permission of The MITRE Corporation.</p>"},{"location":"mitigations/","title":"Mitigations","text":"<p>Mitigations represent security concepts and classes of technologies that can be used to prevent a technique or sub-technique from being successfully executed.</p> ID Name MS-M9001 Multi-factor authentication MS-M9002 Restrict access to the API server using IP firewall MS-M9003 Adhere to least-privilege principle MS-M9004 Secure CI/CD environment MS-M9005 Image assurance policy MS-M9006 Enable Just In Time access to API server MS-M9007 Network intrusion prevention MS-M9008 Limit access to services over network MS-M9009 Require strong authentication to services MS-M9010 Restrict exec commands on pods MS-M9011 Restrict container runtime using LSM MS-M9012 Remove tools from container images MS-M9013 Restrict over permissive containers MS-M9014 Network segmentation MS-M9015 Avoid running management interface on containers MS-M9016 Restrict file and directory permissions MS-M9017 Ensure that pods meet defined Pod Security Standards MS-M9018 Restricting cloud metadata API access MS-M9019 Allocate specific identities to pods MS-M9020 Collect logs to remote data storage MS-M9021 Restrict the usage of unauthenticated APIs in the Cluster MS-M9022 Use managed secret store MS-M9023 Remove unused secrets from the cluster MS-M9024 Restrict access to etcd MS-M9025 Disable service account auto mount MS-M9026 Avoid using plain text credentials MS-M9027 Use NodeRestriction admission controller MS-M9028 Use CNIs that are not prone to ARP poisoning MS-M9029 Set requests and limits for containers MS-M9030 Use cloud storage provider MS-M9031 Implement data backup strategy MS-M9032 Avoid using web-hosted manifest for Kubelet"},{"location":"mitigations/MS-M9001%20Multi-factor%20Authentication/","title":"Multi-factor authentication","text":"<p>Info</p> <p>ID: MS-M9001 MITRE mitigation: M1032</p> <p>Using multi-factor authentication for accounts can prevent unauthorized access in case an adversary achieves access to the account credentials. This can reduce the risk in case an adversary achieved valid credentials to an account that has permissions to the Kubernetes cluster.</p>"},{"location":"mitigations/MS-M9001%20Multi-factor%20Authentication/#techniques-addressed-by-mitigation","title":"Techniques Addressed by Mitigation","text":"ID Name Use MS-TA9001 Using cloud credentials Use multi-factor authentication for cloud accounts which can be elevated to access Kubernetes clusters in that cloud."},{"location":"mitigations/MS-M9002%20Restrict%20access%20to%20the%20API%20server%20using%20IP%20firewall/","title":"Restrict access to the API server using IP firewall","text":"<p>Info</p> <p>ID: MS-M9002 MITRE mitigation: M1035</p> <p>Restricting access to the API server can prevent unwanted access to the clusters management, even if the adversary achieved valid credentials to the cluster.  In managed clusters, cloud providers often support native built-in firewall which can restrict the IP addresses that are allowed to access the API server.</p>"},{"location":"mitigations/MS-M9002%20Restrict%20access%20to%20the%20API%20server%20using%20IP%20firewall/#techniques-addressed-by-mitigation","title":"Techniques Addressed by Mitigation","text":"ID Name Use MS-TA9001 Using cloud credentials Restrict access of cloud accounts to API server from trusted IP addresses only MS-TA9003 Kubeconfig file Restrict access to the API server from known IP addresses MS-TA9024 Connect from proxy server Restrict access to the API server from known IP addresses MS-TA9029 Access Kubernetes API server Restrict access to the API server from known IP addresses MS-TA9040 Denial of service Restrict access to the API server from known IP addresses"},{"location":"mitigations/MS-M9003%20Adhere%20to%20least-privilege%20principle/","title":"Adhere to least-privilege principle","text":"<p>Info</p> <p>ID: MS-M9003 MITRE mitigation: M1018</p> <p>Configure the Kubernetes role-based access controls (RBAC) for each user and service accounts to have only necessary permissions. This applies also to other, external, authorization providers such as Azure RBAC in AKS.</p> <p>In managed cluster, Kubernetes credentials are often retrieved or generated by the cloud provider via API call. To reduce the attack surface, grant permissions to the cloud provider API only to necessary accounts. In the case of Azure, make sure that only required identities have permissions to call: <code>/subscriptions/resourceGroups/providers/Microsoft.ContainerService/managedClusters/listClusterUserCredential</code></p> <p>Kubeconfig file can contain credentials of accounts that allow interaction with a cluster. By applying least privileges principle to all accounts, can limit the impact of an account compromised through Kubeconfig file.</p> <p>Kubernetes project also lists the following recommendations for permissions and role assignment best practices:</p> <ul> <li>Avoid wildcard permissions, especially to all resources.</li> <li>Use RoleBinding instead of ClusterAdminBinding to give access within a namespace.</li> <li>Avoid adding users to the system:master group as it bypasses RBAC.</li> <li>Use impersonation rights for admins instead of adding to the cluster admin role. Audit and monitor when impersonation is being done.</li> <li>Avoid granting the escalate or bind permissions to roles when not needed, audit and monitor when escalation is being made.</li> <li>Avoid adding users to the system:unauthenticated group.</li> <li>Limit permissions to issue CSR and certificate.</li> <li>Avoid granting users with <code>create</code> rights on <code>serviceaccounts/token</code>, which could be exploited to create TokenRequests and issue tokens for existing service accounts.</li> <li>Users with control over <code>validatingwebhookconfigurations</code> or <code>mutatingwebhookconfigurations</code> can control webhooks that can read any object admitted to the cluster, and in the case of mutating webhooks, also mutate admitted objects</li> </ul>"},{"location":"mitigations/MS-M9003%20Adhere%20to%20least-privilege%20principle/#techniques-addressed-by-mitigation","title":"Techniques Addressed by Mitigation","text":"ID Name Use MS-TA9001 Using cloud credentials Limit RBAC privileges in the cloud account to retrieve access credentials to managed Kubenetes clusters. MS-TA9003 Kubeconfig file Limit privileges and actions that can be achieved by getting access to a kubeconfig file MS-TA9008 New container Prevent unnecessary users and service accounts from creating new pods and controllers. MS-TA9011 Sidecar injection Prevent unnecessary users and service accounts from creating new pods and controllers. MS-TA9012 Backdoor container Prevent unnecessary users and service accounts from creating new pods and controllers. MS-TA9014 Kubernetes CronJob Prevent unnecessary users and service accounts from creating new cronjobs. MS-TA9015 Malicious admission controller Restrict permissions to deploy or modify <code>MutatingAdmissionWebhook</code> and <code>ValidatingAdmissionWebhook</code> objects. MS-TA9019 Cluster-admin binding Review privileged role binding and RBAC settings, restrict permissions to configure rolebinding and clusterrolebinding. MS-TA9020 Access cloud resources Grant only necessary permission to the cloud identities. MS-TA9022 Delete Kubernetes events Restrict permissions to delete Kubernetes events. MS-TA9025 List Kubernetes secrets Limit users and service accounts access to Kubernetes secrets. MS-TA9026 Mount service principal Grant minimal required permissions to service principals MS-TA9016 Container Service Account Configure the Kubernetes RBAC such that each service account will have the minimal necessary permissions for the application\u2019s functionality. MS-TA9029 Access Kubernetes API Server Configure the Kubernetes RBAC such as each service account has only the minimal necessary permissions for the application\u2019s functionality. MS-TA9030 Access Kubelet API Kubelet uses Kubernetes RBAC to authorize requests to its API, when <code>Webhook</code> is used as authorization mode. In this mode, Kubelet sends a <code>SubjectAccessReview</code> to the API server to check if the identity is authorized to perform the required action. Configure the Kubernetes RBAC such as only service accounts that should legitimacy communicate with Kubelet API have the relevant permissions. MS-TA9035 CoreDNS poisoning Limit updates permissions to the CoreDNS ConfigMap object. MS-TA9037 Images from a private registry In some configurations, the credentials to private registries are stored as Kubernetes secret. Adhere to least-privilege principle to prevent users from reading image pull secrets. MS-TA9041 Collecting data from pod Adhere to least-privilege principle to prevent users from checkpoint or running kubectl cp commands. <code>kubectl cp</code> wraps exec command which runs a tar process. Preventing exec into a container would effectively restrict <code>kubectl cp</code> command. MS-TA9006 Exec into container Adhere to least-privilege principle to prevent users from exec into containers"},{"location":"mitigations/MS-M9004%20Secure%20CI%20CD%20environment/","title":"Secure CI/CD environment","text":"<p>Info</p> <p>ID: MS-M9004 MITRE mitigation: -</p> <p>Security code repositories and CI/CD environment by placing gates to restrict unauthorized access and modification of content. This can include enforcing RBAC permissions to access and make changes to code, artifacts and build pipelines, ensure governed process for pull-request approval, apply branch policies and others.</p>"},{"location":"mitigations/MS-M9004%20Secure%20CI%20CD%20environment/#techniques-addressed-by-mitigation","title":"Techniques Addressed by Mitigation","text":"ID Name Use MS-TA9002 Compromised image in registry Placing gates in the CI\\CD process can block pushing unsecured code to the image registry."},{"location":"mitigations/MS-M9006%20Enable%20Just%20In%20Time%20access%20to%20API%20server/","title":"Enable Just In Time access to API server","text":"<p>Info</p> <p>ID: MS-M9006 MITRE mitigation: -</p> <p>Employing Just In Time (JIT) elevated access to Kubernetes API server helps reduce the attack surface to the API server by compromised accounts by allowing access only at specific times, and through a governed escalation  process. Enabling JIT access in Kubernetes is often done together with OpenID authentication which includes processes and tools to manage JIT access. One example of such OpenID authentication is Azure Active Directory authentication to Kubernetes clusters. The JIT approval is performed in the cloud control-plane level. Therefore, even if attackers have access to an account credentials, their access to the cluster is limited.</p>"},{"location":"mitigations/MS-M9006%20Enable%20Just%20In%20Time%20access%20to%20API%20server/#techniques-addressed-by-mitigation","title":"Techniques Addressed by Mitigation","text":"ID Name Use MS-TA9003 Kubeconfig file Enable JIT elevated access to API server to limit attack surface or impact."},{"location":"mitigations/MS-M9007%20Network%20Intrusion%20Prevention/","title":"Network intrusion prevention","text":"<p>Info</p> <p>ID: MS-M9007 MITRE mitigation: M1031</p> <p>Use intrusion detection signatures and web application firewall to block traffic at network boundaries to pods and services in a Kubernetes cluster.</p> <p>Adapting the network intrusion prevention solution to Kubernetes environment might be needed to route network traffic destined to services through it.  In some cases, this will be done by deploying a containerized version of a network intrusion prevention solution to the Kubernetes cluster and be part of the cluster network, and in some cases, routing ingress traffic to Kubernetes services through an external appliance, requiring that all ingress traffic will only come from such an appliance.</p>"},{"location":"mitigations/MS-M9007%20Network%20Intrusion%20Prevention/#techniques-addressed-by-mitigation","title":"Techniques Addressed by Mitigation","text":"ID Name Use MS-TA9004 Application vulnerability Use network intrusion prevention to block exploiting vulnerabilities."},{"location":"mitigations/MS-M9008%20Limit%20Access%20to%20Services%20Over%20Network/","title":"Limit access to services over network","text":"<p>Info</p> <p>ID: MS-M9008 MITRE mitigation: M1035</p> <p>Avoid exposing sensitive interfaces insecurely to the Internet or limit access to it. Sensitive interfaces includes management tools and applications that allow creation of new containers in the cluster. Some of those services does not use authentication by default and are not intended to be exposed. Examples of services that were exploited: Weave Scope, Apache NiFi and more.</p> <p>If services need to be exposed to the internet and are exposed using <code>LoadBalancer</code> service, use IP restriction (<code>loadBalancerSourceRanges</code>) when possible. This reduces the attack surface of the application and can prevent attackers from being able to reach the sensitive interfaces.</p>"},{"location":"mitigations/MS-M9008%20Limit%20Access%20to%20Services%20Over%20Network/#techniques-addressed-by-mitigation","title":"Techniques Addressed by Mitigation","text":"ID Name Use MS-TA9005 Exposed sensitive interfaces Limit access to sensitive interface over the Internet"},{"location":"mitigations/MS-M9009%20Require%20Strong%20Authentication%20to%20Services/","title":"Require strong authentication to services","text":"<p>Info</p> <p>ID: MS-M9009 MITRE mitigation: -</p> <p>Use strong authentication when exposing sensitive interfaces to the Internet. For example, attacks were observed against exposed Kubeflow and Argo workloads that were not configured to use OpenID Connect or other authentication methods.</p> <p>Use strong authentication methods to the Kubernetes API that will prevent attackers from gaining access to the cluster even if valid credentials such as kubeconfig were achieved. For example, in AKS use AAD authentication instead of basic authentication. By using AAD authentication, a short-lived credential of the cluster is retrieved after authenticating to AAD.</p> <p>Avoid using the read-only endpoint of Kubelet in port <code>10255</code>, which doesn\u2019t require authentication. In newer version of managed clusters, this port is disabled.</p>"},{"location":"mitigations/MS-M9009%20Require%20Strong%20Authentication%20to%20Services/#techniques-addressed-by-mitigation","title":"Techniques Addressed by Mitigation","text":"ID Name Use MS-TA9005 Exposed sensitive interfaces Require strong authentication to exposed services MS-TA9024 Connect from proxy server Limit usage of kubeconfig authentication to the API server MS-TA9030 Access Kubelet API Avoid using the unsecured port 10255 for the Kubelet API"},{"location":"mitigations/MS-M9010%20Restrict%20Exec%20Commands%20on%20Pods/","title":"Restrict exec commands on pods","text":"<p>Info</p> <p>ID: MS-M9010 MITRE mitigation: -</p> <p>Restrict running Kubenetes <code>exec</code> command on sensitive\\production containers using admission controller. This can prevent attackers from running malicious code on containers in cases when he <code>pods/exec</code> permission was obtained.</p>"},{"location":"mitigations/MS-M9010%20Restrict%20Exec%20Commands%20on%20Pods/#techniques-addressed-by-mitigation","title":"Techniques Addressed by Mitigation","text":"ID Name Use MS-TA9006 Exec into container Restrict exec commands on pods using admissions controller. MS-TA9041 Collecting data from pod Restrict checkpoint and other commands on pods using admissions controller."},{"location":"mitigations/MS-M9011%20Restrict%20Container%20Runtime%20using%20LSM/","title":"Restrict container runtime using LSM","text":"<p>Info</p> <p>ID: MS-M9011 MITRE mitigation: M1038, M1040</p> <p>Restrict the running environment of the containers using Linux security modules, such as AppArmor, SELinux, Seccomp and others. Linux security modules can restrict access to files, running processes, certain system calls and others. Also, dropping unnecessary Linux capabilities from the container runtime environment helps reduce the attack surface of such container.</p>"},{"location":"mitigations/MS-M9011%20Restrict%20Container%20Runtime%20using%20LSM/#techniques-addressed-by-mitigation","title":"Techniques Addressed by Mitigation","text":"ID Name Use MS-TA9006 Exec into container Restrict container runtime capabilities using LSM. MS-TA9007 Bash or Cmd inside container Restrict container runtime capabilities using LSM. MS-TA9009 Application exploit (RCE) Restrict container runtime capabilities using LSM. MS-TA9010 SSH server running inside container Limit which process can open network socket on a container. MS-TA9013 Writable hostPath mount Use AppArmor to restrict file writing. MS-TA9039 Resource hijacking Restrict execution of unwanted processes in containers. MS-TA9040 Denial of service Restrict execution of unwanted processes in containers."},{"location":"mitigations/MS-M9012%20Remove%20Tools%20from%20Container%20Images/","title":"Remove tools from container images","text":"<p>Info</p> <p>ID: MS-M9012 MITRE mitigation: M1042</p> <p>Attackers often use built-in executables to run their malicious code. Removing unused executables from the image filesystem can prevent such activity. Examples of executables that are commonly used in malicious activity include: sh, bash, curl, wget, chmod and more.</p>"},{"location":"mitigations/MS-M9012%20Remove%20Tools%20from%20Container%20Images/#techniques-addressed-by-mitigation","title":"Techniques Addressed by Mitigation","text":"ID Name Use MS-TA9007 Bash or Cmd inside container Remove bash and other terminals from container images. MS-TA9039 Resource hijacking Remove unused tools from the container image."},{"location":"mitigations/MS-M9013%20Restrict%20over%20permissive%20containers/","title":"Restrict over permissive containers","text":"<p>Info</p> <p>ID: MS-M9013 MITRE mitigation: M1038</p> <p>Use admission controller to prevent deploying containers with over-permissive capabilities or configuration in the cluster. This can include restricting privileged containers, containers with sensitive volumes, containers with excessive capabilities, and other signs of over permissive containers.</p> <p>In AKS clusters which are configured to use service principal, the service principal credentials are stored in the <code>/etc/kubernetes/azure.json</code> file on the cluster nodes. Containers with access to a volume containing this file are considered as containers with sensitive mount.</p>"},{"location":"mitigations/MS-M9013%20Restrict%20over%20permissive%20containers/#techniques-addressed-by-mitigation","title":"Techniques Addressed by Mitigation","text":"ID Name Use MS-TA9008 New container Restrict over permissive containers in the cluster using admission controller. MS-TA9011 Sidecar injection Restrict over permissive containers in the cluster using admission controller. MS-TA9012 Backdoor container Restrict over permissive containers in the cluster using admission controller. MS-TA9013 Writable hostPath mount Block sensitive volume mounts using admission controller. MS-TA9014 Kubernetes CronJob Check cronjob pod template for sensitive mounts and excessive permissions. MS-TA9018 Privileged container Block Privileged containers using admission controller. MS-TA9020 Access cloud resources Block mounting volumes with access to cloud credentials. MS-TA9026 Mount service principal Block sensitive volume mounts using admission controller MS-TA9036 ARP poisoning and IP spoofing Avoid NET_RAW capability in containers which would enable sending crafted packets that perform ARP poisoning."},{"location":"mitigations/MS-M9014%20Network%20Segmentation/","title":"Network segmentation","text":"<p>Info</p> <p>ID: MS-M9014 MITRE mitigation: M1030</p> <p>Restrict inbound and outbound network traffic of the pods in the cluster. This includes inner-cluster communication as well as ingress\\egress traffic to\\from the cluster. Network Policies are a native K8s solution for networking restrictions in the cluster.</p>"},{"location":"mitigations/MS-M9014%20Network%20Segmentation/#techniques-addressed-by-mitigation","title":"Techniques Addressed by Mitigation","text":"ID Name Use MS-TA9009 Application exploit (RCE) Limit network access to containers MS-TA9010 SSH server running inside container Limit network access to containers MS-TA9024 Connect from proxy server Limit network access from known proxy networks. MS-TA9030 Access Kubelet API Restrict access of pods to the Kubelet API using Network Policy, blocking pod traffic to the ports 10250 and 10255. MS-TA9031 Network segmentation Restrict network between pods using network policies MS-TA9005 Exposed sensitive interfaces Restrict network access to the sensitive interfaces. MS-TA9034 Cluster internal networking Provision pod network policies to restrict the traffic between pods"},{"location":"mitigations/MS-M9015%20Avoid%20Running%20Management%20Interface%20on%20Containers/","title":"Avoid running management interface on containers","text":"<p>Info</p> <p>ID: MS-M9015 MITRE mitigation: M1042</p> <p>Avoid running SSH daemon, as well as other management interfaces, if they aren\u2019t necessary for the application\u2019s functionality.</p>"},{"location":"mitigations/MS-M9015%20Avoid%20Running%20Management%20Interface%20on%20Containers/#techniques-addressed-by-mitigation","title":"Techniques Addressed by Mitigation","text":"ID Name Use MS-TA9010 SSH server running inside container Avoid running SSH daemon on containers"},{"location":"mitigations/MS-M9016%20Restrict%20File%20and%20Directory%20Permissions/","title":"Restrict file and directory permissions","text":"<p>Info</p> <p>ID: MS-M9016 MITRE mitigation: M1022</p> <p>When using <code>hostPath</code> volumes, set it to \u201cread-only\u201d mode if possible. This prevents the container from writing to files in the underlying node and will harden an escape from the container to the node.</p> <p>Kubelet monitors a specific folder on the node which contains static pods manifest. By default the location of static pod manifest on nodes is at <code>/etc/kubernetes/manifests</code>. Restrict access of users to this folder to avoid deployments of unwanted static pods.</p>"},{"location":"mitigations/MS-M9016%20Restrict%20File%20and%20Directory%20Permissions/#techniques-addressed-by-mitigation","title":"Techniques Addressed by Mitigation","text":"ID Name Use MS-TA9013 Writable hostPath mount Use read-only volumes. MS-TA9021 Clear container logs Restrict access to container logs. MS-TA9017 Static pods Restrict write access to the Static pods manifest folder."},{"location":"mitigations/MS-M9017%20Ensure%20that%20pods%20meet%20defined%20Pod%20Security%20Standards/","title":"Ensure that pods meet defined Pod Security Standards","text":"<p>Info</p> <p>ID: MS-M9017 MITRE mitigation: -</p> <p>The Pod Security Standards define three different policies to broadly cover the security spectrum. These policies are cumulative and range from highly-permissive to highly-restrictive. Decoupling policy definition from policy instantiation allows for a common understanding and consistent language of policies across clusters, independent of the underlying enforcement mechanism. At the same time, Kubernetes offers a built-in Pod Security admission controller to enforce the Pod Security Standards. Pod security restrictions are applied at the namespace level when pods are created.</p>"},{"location":"mitigations/MS-M9017%20Ensure%20that%20pods%20meet%20defined%20Pod%20Security%20Standards/#techniques-addressed-by-mitigation","title":"Techniques Addressed by Mitigation","text":"ID Name Use MS-TA9013 Writable hostPath mount Use <code>Baseline</code> or <code>Restricted</code> pod security standards to prevent exploiting writable hostPath mount. MS-TA9018 Privileged container Restrict privileged containers using pod security standards."},{"location":"mitigations/MS-M9018%20Restricting%20cloud%20metadata%20API%20access/","title":"Restricting cloud metadata API access","text":"<p>Info</p> <p>ID: MS-M9018 MITRE mitigation: M1035</p> <p>Many cluster-to-cloud authentication methods involve access to the node\u2019s metadata server. Restrict access to the metadata server if it\u2019s not necessary. This can be done at the pod level by using networking restriction tools such as network policies. Alternatively, cloud providers allow this functionality in the node\\cluster level. For instance, in AWS one can restrict the hop count limit of IMDS as described here. In AKS, deploying <code>AAD pod identity</code> would restrict access to IMDS.</p>"},{"location":"mitigations/MS-M9018%20Restricting%20cloud%20metadata%20API%20access/#techniques-addressed-by-mitigation","title":"Techniques Addressed by Mitigation","text":"ID Name Use MS-TA9020 Access cloud resources Restrict the access of pods to IMDS to restrict pods from getting access to cloud identities. MS-TA9028 Access Managed Identity credentials Restrict the access of pods to IMDS MS-TA9033 Instance Metadata API Restrict the access of pods to IMDS MS-TA9037 Images from a private registry Restrict access to IMDS to prevent authentication with a private registry using cloud identities."},{"location":"mitigations/MS-M9019%20Allocate%20specific%20identities%20to%20pods/","title":"Allocate specific identities to pods","text":"<p>Info</p> <p>ID: MS-M9019 MITRE mitigation: -</p> <p>When needed, allocate dedicated cloud identity per pod with minimal permissions, instead of inheriting the node\u2019s cloud identity. This prevents other pods from accessing cloud identities that are not necessary for their operation. The features that implement this separation are: Azure AD Pod Identity (AKS), Azure AD Workload identity (AKS), IRSA (EKS) and GCP Workload Identity (GCP).</p>"},{"location":"mitigations/MS-M9019%20Allocate%20specific%20identities%20to%20pods/#techniques-addressed-by-mitigation","title":"Techniques Addressed by Mitigation","text":"ID Name Use MS-TA9020 Access cloud resources Use dedicated allocated identities to pods MS-TA9028 Access Managed Identity credentials Allocate specific identities to pods."},{"location":"mitigations/MS-M9020%20Collect%20Logs%20to%20Remote%20Data%20Storage/","title":"Collect logs to remote data storage","text":"<p>Info</p> <p>ID: MS-M9020 MITRE mitigation: M1029</p> <p>Collect the Kubernetes and application logs of pods to external data storage to avoid tampering or deletion. This can be achieved by various open-source tools such as Fluentd. Also, built-in cloud solutions are available for managed clusters, such as Container Insights and Log Analytics in AKS and Cloud Logging in GKE.</p>"},{"location":"mitigations/MS-M9020%20Collect%20Logs%20to%20Remote%20Data%20Storage/#techniques-addressed-by-mitigation","title":"Techniques Addressed by Mitigation","text":"ID Name Use MS-TA9021 Clear container logs Collect container logs to a separate storage system. MS-TA9022 Delete Kubernetes events Collect Kubernetes logs to a separate storage system."},{"location":"mitigations/MS-M9021%20Restrict%20the%20usage%20of%20unauthenticated%20APIs%20in%20the%20Cluster/","title":"Restrict the usage of unauthenticated APIs in the cluster","text":"<p>Info</p> <p>ID: MS-M9021 MITRE mitigation: -</p> <p>Some unmanaged clusters are misconfigured such as anonymous access is accepted by the Kubernetes API server. Make sure that the Kubernetes API is configured properly, and authentication and authorization mechanisms are set.</p>"},{"location":"mitigations/MS-M9021%20Restrict%20the%20usage%20of%20unauthenticated%20APIs%20in%20the%20Cluster/#techniques-addressed-by-mitigation","title":"Techniques Addressed by Mitigation","text":"ID Name Use MS-TA9024 Connect from proxy server Restrict unauthenticated API to the Kubernetes API server."},{"location":"mitigations/MS-M9022%20Use%20Managed%20Secret%20Store/","title":"Use managed secret store","text":"<p>Info</p> <p>ID: MS-M9022 MITRE mitigation: M1029</p> <p>Use cloud secret store, such as Azure Key Vault, to securely store secrets that are used by the workloads in the cluster. This allows cloud-level management of the secret which includes permission management, expiration management, secret rotation, auditing, etc. The integration of cloud secret stores with Kubernetes is done by using Secrets Store CSI Driver, which is implemented by all major cloud providers.</p>"},{"location":"mitigations/MS-M9022%20Use%20Managed%20Secret%20Store/#techniques-addressed-by-mitigation","title":"Techniques Addressed by Mitigation","text":"ID Name Use MS-TA9025 List Kubernetes secrets Use cloud provider secret store to securely manage credentials in the cluster MS-TA9027 Application credentials in configuration files Store secrets securely in managed secret stores"},{"location":"mitigations/MS-M9023%20Remove%20unused%20secrets%20from%20the%20cluster/","title":"Remove unused secrets from the cluster","text":"<p>Info</p> <p>ID: MS-M9023 MITRE mitigation: -</p> <p>Remove unused secrets objects from the cluster.</p>"},{"location":"mitigations/MS-M9023%20Remove%20unused%20secrets%20from%20the%20cluster/#techniques-addressed-by-mitigation","title":"Techniques Addressed by Mitigation","text":"ID Name Use MS-TA9025 List Kubernetes secrets Remove unused secrets from the cluster."},{"location":"mitigations/MS-M9024%20Restrict%20access%20to%20etcd/","title":"Restrict access to etcd","text":"<p>Info</p> <p>ID: MS-M9024 MITRE mitigation: M1035</p> <p>Access to etcd should be limited to the Kubernetes control plane only. Depending on your configuration, you should attempt to use etcd over TLS. This mitigation is relevant only to non-managed Kubernetes environment, as access to etcd in cloud managed clusters is already restricted.</p>"},{"location":"mitigations/MS-M9024%20Restrict%20access%20to%20etcd/#techniques-addressed-by-mitigation","title":"Techniques Addressed by Mitigation","text":"ID Name Use MS-TA9025 List Kubernetes secrets Restrict access to etcd."},{"location":"mitigations/MS-M9025%20Disable%20Service%20Account%20Auto%20Mount/","title":"Disable service account auto mount","text":"<p>Info</p> <p>ID: MS-M9025 MITRE mitigation: -</p> <p>By default, a service account is mounted to every pod. If the application doesn\u2019t require access to the Kubernetes API, disable the service account auto-mount by specifying <code>automountServiceAccountToken: false</code> in the pod configuration.</p>"},{"location":"mitigations/MS-M9025%20Disable%20Service%20Account%20Auto%20Mount/#techniques-addressed-by-mitigation","title":"Techniques Addressed by Mitigation","text":"ID Name Use MS-TA9016 Container service account Disable service account auto mount."},{"location":"mitigations/MS-M9026%20Avoid%20using%20plain%20text%20credentials%20in%20configuration%20files/","title":"Avoid using plain text credentials","text":"<p>Info</p> <p>ID: MS-M9026 MITRE mitigation: -</p> <p>Avoid using plain text credentials in configuration files. Use Kubernetes secrets or cloud secret store instead. This prevents unwanted access to plaintext credentials in source code, configuration files and Kubernetes objects.</p>"},{"location":"mitigations/MS-M9026%20Avoid%20using%20plain%20text%20credentials%20in%20configuration%20files/#techniques-addressed-by-mitigation","title":"Techniques Addressed by Mitigation","text":"ID Name Use MS-TA9027 Application credentials in configuration files Avoid using plain text credentials in Kubernetes configuration"},{"location":"mitigations/MS-M9027%20Use%20NodeRestriction%20Admission%20Controller/","title":"Use NodeRestriction admission controller","text":"<p>Info</p> <p>ID: MS-M9027 MITRE mitigation: -</p> <p>NodeRestriction admission controller limits the permissions of kubelet and allows it to modify only its own Node object and only the pods that are running on its own node. This may limit attackers who have access to the Kubelet API from gaining full control over the cluster.</p>"},{"location":"mitigations/MS-M9027%20Use%20NodeRestriction%20Admission%20Controller/#techniques-addressed-by-mitigation","title":"Techniques Addressed by Mitigation","text":"ID Name Use MS-TA9030 Access Kubelet API Limit Kubelet permissions to pods and nodes"},{"location":"mitigations/MS-M9028%20Use%20CNIs%20that%20are%20not%20prone%20to%20ARP%20poisoning/","title":"Use CNIs that are not prone to ARP poisoning","text":"<p>Info</p> <p>ID: MS-M9028 MITRE mitigation: -</p> <p>Kubernetes default CNI (Kubenet) is prone to ARP poisoning. This allows pods to impersonate other pods in the cluster. Use alternative CNIs that are not prone to ARP poisoning in the cluster.</p>"},{"location":"mitigations/MS-M9028%20Use%20CNIs%20that%20are%20not%20prone%20to%20ARP%20poisoning/#techniques-addressed-by-mitigation","title":"Techniques Addressed by Mitigation","text":"ID Name Use MS-TA9036 ARP poisoning and IP spoofing Use CNIs that are not prone to ARP poisoning."},{"location":"mitigations/MS-M9029%20Set%20requests%20and%20limits%20for%20containers/","title":"Set requests and limits for containers","text":"<p>Info</p> <p>ID: MS-M9029 MITRE mitigation: -</p> <p>Set requests and limits for each container to avoid resource contention and DoS attacks.</p>"},{"location":"mitigations/MS-M9029%20Set%20requests%20and%20limits%20for%20containers/#techniques-addressed-by-mitigation","title":"Techniques Addressed by Mitigation","text":"ID Name Use MS-TA9040 Denial of service Limit compute resources for containers."},{"location":"mitigations/MS-M9030%20Use%20Cloud%20Storage%20Provider/","title":"Use cloud storage provider","text":"<p>Info</p> <p>ID: MS-M9030 MITRE mitigation: -</p> <p>Use cloud storage services, such as Azure Files, for storing the application\u2019s data. Kubernetes integrates with all main cloud provider storage services as storage providers for pod volumes. This allows leveraging cloud storage capabilities such as backup and snapshots.</p>"},{"location":"mitigations/MS-M9030%20Use%20Cloud%20Storage%20Provider/#techniques-addressed-by-mitigation","title":"Techniques Addressed by Mitigation","text":"ID Name Use MS-TA9038 Data destruction Use Cloud Storage provider to persist application data."},{"location":"mitigations/MS-M9031%20Implement%20Data%20Backup%20Strategy/","title":"Implement data backup strategy","text":"<p>Info</p> <p>ID: MS-M9031 MITRE mitigation: M1053</p> <p>Take and store data backups from pod mounted volumes for critical workloads. Ensure backup and storage systems are hardened and kept separate from the Kubernetes environment to prevent compromise.</p>"},{"location":"mitigations/MS-M9031%20Implement%20Data%20Backup%20Strategy/#techniques-addressed-by-mitigation","title":"Techniques Addressed by Mitigation","text":"ID Name Use MS-TA9038 Data destruction Backup pod mounted volumes for critical workloads."},{"location":"mitigations/MS-M9032%20Avoid%20using%20web-hosted%20manifest%20for%20Kubelet/","title":"Avoid using web-hosted manifest for Kubelet","text":"<p>Info</p> <p>ID: MS-M9032 MITRE mitigation: -</p> <p>Kubelet can deploy static pods by using manifests that are stored in web accessible locations. If web-hosted manifest are not required, make sure that Kubelet does not run with <code>--manifest-url</code> argument.</p>"},{"location":"mitigations/MS-M9032%20Avoid%20using%20web-hosted%20manifest%20for%20Kubelet/#techniques-addressed-by-mitigation","title":"Techniques Addressed by Mitigation","text":"ID Name Use MS-TA9017 Static pods Avoid using web-hosted manifest for Kubelet."},{"location":"mitigations/MS-M9005/","title":"Image assurance policy","text":"<p>Info</p> <p>ID: MS-M9005 MITRE mitigation: M1016, M1045</p> <p>Apply image assurance policy to evaluate container images against vulnerabilities, malware, exposed secrets or other policies. By ensuring consistent and comprehensive image assurance policy across the build, ship and run development stages.</p> <p>One approach of ensuring images passes assurance or compliance checks it to sign the container images, so the image signature can be checks downstream when deploying to Kubernetes clusters at runtime.</p> <p>Sub-mitigations</p> ID Name MS-M9005.001 Gate generated images in CI/CD pipeline MS-M9005.002 Gate images pushed to registries MS-M9005.003 Gate images deployed to Kubernetes cluster"},{"location":"mitigations/MS-M9005/#techniques-addressed-by-mitigation","title":"Techniques Addressed by Mitigation","text":"ID Name Use MS-TA9002 Compromised image in registry Ensure that only images that passed the security compliance policies are pushed to registries and deployed to Kubernetes clusters. MS-TA9004 Application vulnerability Scan images for vulnerabilities MS-TA9009 Application exploit (RCE) Block vulnerable images MS-TA9034 Cluster internal networking Avoid deployment of vulnerable applications to the cluster"},{"location":"mitigations/MS-M9005/MS-M9005.001%20Gate%20generated%20images%20in%20CI%20CD%20pipeline/","title":"Gate generated images in CI/CD pipeline","text":"<p>Info</p> <p>ID: MS-M9005.001 Sub-mitigation of: MS-M9005 MITRE mitigation: M1016, M1045</p> <p>Placing gates in the CI\\CD pipeline that can cancel or fail pipeline execution to block container images not meeting content trust requirements.</p>"},{"location":"mitigations/MS-M9005/MS-M9005.001%20Gate%20generated%20images%20in%20CI%20CD%20pipeline/#techniques-addressed-by-mitigation","title":"Techniques Addressed by Mitigation","text":"ID Name Use MS-TA9002 Compromised image in registry Ensure that only images that passed the security compliance policies are pushed to registries and deployed to Kubernetes clusters. MS-TA9004 Application vulnerability Scan images for vulnerabilities MS-TA9009 Application exploit (RCE) Block vulnerable images"},{"location":"mitigations/MS-M9005/MS-M9005.002%20Gate%20images%20pushed%20to%20registries/","title":"Gate images pushed to registries","text":"<p>Info</p> <p>ID: MS-M9005.002 Sub-mitigation of: MS-M9005 MITRE mitigation: M1016, M1045</p> <p>Placing gates in the container registry to prevent pushing or quarantine images that does not meet the content trust requirement. Some container registries can support gates that will prevent pushing images, while others might quarantine images after they were already push to the registry. Ensuring that gates exists at the registry level can help preventing bypass of gates at the CI/CD pipelines level.</p>"},{"location":"mitigations/MS-M9005/MS-M9005.002%20Gate%20images%20pushed%20to%20registries/#techniques-addressed-by-mitigation","title":"Techniques Addressed by Mitigation","text":"ID Name Use MS-TA9002 Compromised image in registry Ensure that only images that passed the security compliance policies are pushed to registries and deployed to Kubernetes clusters. MS-TA9004 Application vulnerability Scan images for vulnerabilities MS-TA9009 Application exploit (RCE) Block vulnerable images"},{"location":"mitigations/MS-M9005/MS-M9005.003%20Gate%20images%20deployed%20to%20Kubenertes%20cluster/","title":"Gate images deployed to Kubernetes cluster","text":"<p>Info</p> <p>ID: MS-M9005.003 Sub-mitigation of: MS-M9005 MITRE mitigation: M1016, M1045</p> <p>Gate deployment of images to Kubernetes cluster to prevent deploying images that does not meet the content trust requirements. This can include limiting images to be deployed only from trusted registries, to have digital signature or pass vulnerability scanning and other checks. This can prevent potential adversaries from using their own malicious images in the cluster. Also, this ensures that only images that passed the security compliance policies of the organization are deployed in the cluster. Kubernetes admission controller mechanism is one of the commonly used tools for implementing such policy.</p>"},{"location":"mitigations/MS-M9005/MS-M9005.003%20Gate%20images%20deployed%20to%20Kubenertes%20cluster/#techniques-addressed-by-mitigation","title":"Techniques Addressed by Mitigation","text":"ID Name Use MS-TA9002 Compromised image in registry Ensure that only images that passed the security compliance policies are pushed to registries and deployed to Kubernetes clusters. MS-TA9004 Application vulnerability Scan images for vulnerabilities MS-TA9008 New container Restrict deployment of new containers from trusted supply chain MS-TA9009 Application exploit (RCE) Block vulnerable images MS-TA9011 Sidecar injection Restrict deployment of new containers from trusted supply chain MS-TA9012 Backdoor container Restrict deployment of new containers from trusted supply chain MS-TA9014 Kubernetes CronJob Restrict deployment of new containers from trusted supply chain MS-TA9018 Privileged container Restrict deployment of new containers from trusted supply chain MS-TA9023 Pod or container name similarity Restrict deployment of new containers from trusted supply chain"},{"location":"tactics/Collection/","title":"Collection","text":"<p>Collection in Kubernetes consists of techniques that are used by attackers to collect data from the cluster or through using the cluster.</p> ID Name MS-TA9037 Images from a private registry MS-TA9041 Collecting data from pod"},{"location":"tactics/CredentialAccess/","title":"Credential Access","text":"<p>The credential access tactic consists of techniques that are used by attackers to steal credentials.</p> <p>In containerized environments, this includes credentials of the running application, identities, secrets stored in the cluster, or cloud credentials.</p> ID Name MS-TA9025 List K8S secrets MS-TA9026 Mount service principal MS-TA9016 Container service account MS-TA9027 Application credentials in configuration files MS-TA9028 Access managed identity credentials MS-TA9015 Malicious admission controller"},{"location":"tactics/DefenseEvasion/","title":"Defense Evasion","text":"<p>The defense evasion tactic consists of techniques that are used by attackers to avoid detection and hide their activity.</p> ID Name MS-TA9021 Clear container logs MS-TA9022 Delete K8S events MS-TA9023 Pod / container name similarity MS-TA9024 Connect from proxy server"},{"location":"tactics/Discovery/","title":"Discovery","text":"<p>The discovery tactic consists of techniques that are used by attackers to explore the environment to which they gained access. This exploration helps the attackers to perform lateral movement and gain access to additional resources.</p> ID Name MS-TA9029 Access Kubernetes API server MS-TA9030 Access Kubelet API MS-TA9031 Network mapping MS-TA9005 Exposed sensitive interfaces MS-TA9033 Instance Metadata API"},{"location":"tactics/Execution/","title":"Execution","text":"<p>The execution tactic consists of techniques that are used by attackers to run their code inside a cluster.</p> ID Name MS-TA9006 Exec into container MS-TA9007 bash/cmd inside container MS-TA9008 New container MS-TA9009 Application exploit (RCE) MS-TA9010 SSH server running inside container MS-TA9011 Sidecar injection"},{"location":"tactics/Impact/","title":"Impact","text":"<p>The Impact tactic consists of techniques that are used by attackers to destroy, abuse, or disrupt the normal behavior of the environment.</p> ID Name MS-TA9038 Data destruction MS-TA9039 Resource hijacking MS-TA9040 Denial of service"},{"location":"tactics/InitialAccess/","title":"Initial Access","text":"<p>The initial access tactic consists of techniques that are used for gaining access to the resource. In containerized environments, those techniques enable first access to the cluster. This access can be achieved directly via the cluster management layer or, alternatively, by gaining access to a malicious or vulnerable resource that is deployed on the cluster.</p> ID Name MS-TA9001 Using cloud credentials MS-TA9002 Compromised image in registry MS-TA9003 Kubeconfig file MS-TA9004 Application vulnerability MS-TA9005 Exposed sensitive interfaces"},{"location":"tactics/LateralMovement/","title":"Lateral Movement","text":"<p>The lateral movement tactic consists of techniques that are used by attackers to move through the victim\u2019s environment. In containerized environments, this includes gaining access to various resources in the cluster from a given access to one container, gaining access to the underlying node from a container, or gaining access to the cloud environment.</p> ID Name MS-TA9020 Access cloud resources MS-TA9016 Container service account MS-TA9034 Cluster internal networking MS-TA9027 Application credentials in configuration files MS-TA9013 Writable hostPath mount MS-TA9035 CoreDNS poisoning MS-TA9036 ARP poisoning and IP spoofing"},{"location":"tactics/Persistence/","title":"Persistence","text":"<p>The persistence tactic consists of techniques that are used by attackers to keep access to the cluster in case their initial foothold is lost.</p> ID Name MS-TA9012 Backdoor container MS-TA9013 Writable hostPath mount MS-TA9014 Kubernetes CronJob MS-TA9015 Malicious admission controller MS-TA9016 Container service account MS-TA9017 Static pods"},{"location":"tactics/PrivilegeEscalation/","title":"Privilege Escalation","text":"<p>The privilege escalation tactic consists of techniques that are used by attackers to get higher privileges in the environment than those they currently have. In containerized environments, this can include getting access to the node from a container, gaining higher privileges in the cluster, and even getting access to the cloud resources.</p> ID Name MS-TA9018 Privileged container MS-TA9019 Cluster-admin binding MS-TA9013 hostPath mount MS-TA9020 Access cloud resources"},{"location":"techniques/ARP%20poisoning%20and%20IP%20spoofing/","title":"ARP poisoning and IP spoofing","text":"<p>Info</p> <p>ID: MS-TA9036 Tactic: Lateral Movement  MITRE technique: T1557</p> <p>Kubernetes has numerous network plugins (Container Network Interfaces or CNIs) that can be used in the cluster. Kubenet is the basic, and in many cases the default, network plugin. In this configuration, a bridge is created on each node (cbr0) to which the various pods are connected using veth pairs. The fact that cross-pod traffic is through a bridge, a level-2 component, means that performing ARP poisoning in the cluster is possible. Therefore, if attackers get access to a pod in the cluster, they can perform ARP poisoning, and spoof the traffic of other pods. By using this technique, attackers can perform several attacks at the network-level which can lead to lateral movements, such as DNS spoofing or stealing cloud identities of other pods (CVE-2021-1677).</p>"},{"location":"techniques/ARP%20poisoning%20and%20IP%20spoofing/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9013 Restrict over permissive containers Avoid NET_RAW capability in containers which would enable sending crafted packets that perform ARP poisoning. MS-M9028 Use CNIs that are not prone to ARP poisoning Use CNIs that are not prone to ARP poisoning."},{"location":"techniques/Access%20Kubelet%20API/","title":"Access Kubelet API","text":"<p>Info</p> <p>ID: MS-TA9030 Tactic: Discovery  MITRE technique: T1613</p> <p>Kubelet is the Kubernetes agent that is installed on each node. Kubelet is responsible for the proper execution of pods that are assigned to the node. Kubelet exposes a read-only API service that does not require authentication (TCP port 10255). Attackers with network access to the host (for example, via running code on a compromised container) can send API requests to the Kubelet API. Specifically querying https://[NODE IP]:10255/pods/ retrieves the running pods on the node. https://[NODE IP]:10255/spec/ retrieves information about the node itself, such as CPU and memory consumption.</p>"},{"location":"techniques/Access%20Kubelet%20API/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9009 Require Strong Authentication to Services Avoid using the unsecured port 10255 for the Kubelet API MS-M9014 Network Segmentation Restrict access of pods to the Kubelet API using Network Policy, blocking pod traffic to the ports 10250 and 10255. MS-M9003 Adhere to least-privilege principle Kubelet uses Kubernetes RBAC to authorize requests to its API, when <code>Webhook</code> is used as authorization mode. In this mode, Kubelet sends a <code>SubjectAccessReview</code> to the API server to check if the identity is authorized to perform the required action. Configure the Kubernetes RBAC such as only service accounts that should legitimacy communicate with Kubelet API have the relevant permissions. MS-M9027 Use NodeRestriction Admission Controller Limit Kubelet permissions to pods and nodes"},{"location":"techniques/Access%20cloud%20resources/","title":"Access cloud resources","text":"<p>Info</p> <p>ID: MS-TA9020  Tactic: Privilege Escalation, Lateral Movement  MITRE technique: T1078.004</p> <p>If the Kubernetes cluster is deployed in the cloud, in some cases attackers can leverage their access to a single container to get access to other cloud resources outside the cluster. For example, AKS uses several managed identities that are attached to the nodes, for the cluster operation. Similar identities exist also in EKS and GKE (EC2 roles and IAM service accounts, respectively). By default, running pods can retrieve the identities which in some configurations have privileged permissions. Therefore, if attackers gain access to a running pod in the cluster, they can leverage the identities to access external cloud resources.</p> <p>Also, AKS has an option to authenticate with Azure using a service principal. When this option is enabled, each node stores service principal credentials that are located in /etc/kubernetes/azure.json. AKS uses this service principal to create and manage Azure resources that are needed for the cluster operation. By default, the service principal has contributor permissions in the cluster\u2019s Resource Group. Attackers who get access to this service principal file (by hostPath mount, for example) can use its credentials to access or modify the cloud resources.</p>"},{"location":"techniques/Access%20cloud%20resources/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9003 Adhere to least-privilege principle Grant only necessary permission to the cloud identities. MS-M9018 Restrict the access of pods to IMDS Restrict the access of pods to IMDS to restrict pods from getting access to cloud identities. MS-M9019 Allocate specific identities to pods Use dedicated allocated identities to pods MS-M9013 Restrict over permissive containers Block mounting volumes with access to cloud credentials."},{"location":"techniques/Access%20managed%20identity%20credentials/","title":"Access Managed Identity credentials","text":"<p>Info</p> <p>ID: MS-TA9028 Tactic: Credential Access  MITRE technique: T1552.005</p> <p>Managed identities are identities that are managed by the cloud provider and can be allocated to cloud resources, such as virtual machines. Those identities are used to authenticate with cloud services. The identity\u2019s secret is fully managed by the cloud provider, which eliminates the need to manage the credentials. Applications can obtain the identity\u2019s token by accessing the Instance Metadata Service (IMDS). Attackers who get access to a Kubernetes pod can leverage their access to the IMDS endpoint to get the managed identity\u2019s token. With a token, the attackers can access cloud resources.</p>"},{"location":"techniques/Access%20managed%20identity%20credentials/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9018 Restricting cloud metadata API access Restrict the access of pods to IMDS MS-M9019 Allocate specific identities to pods Allocate specific identities to pods."},{"location":"techniques/Access%20the%20K8S%20API%20server/","title":"Access Kubernetes API server","text":"<p>Info</p> <p>ID: MS-TA9029 Tactic: Discovery  MITRE technique: T1613</p> <p>The Kubernetes API server is the gateway to the cluster. Actions in the cluster are performed by sending various requests to the RESTful API. The status of the cluster, which includes all the components that are deployed on it, can be retrieved by the API server. Attackers may send API requests to probe the cluster and get information about containers, secrets, and other resources in the cluster.</p> <p>In addition, the Kubernetes API server can also be used to query information about Role Based Access (RBAC) information such as Roles, ClusterRoles, RoleBinding, ClusterRoleBinding and Service Accounts. Attacker may use this information to discover permissions and access associated with Service Accounts in the cluster and use this information to progress towards its attack objectives.</p>"},{"location":"techniques/Access%20the%20K8S%20API%20server/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9003 Adhere to least-privilege principle Configure the Kubernetes RBAC such as each service account has only the minimal necessary permissions for the application\u2019s functionality. MS-M9002 Restrict access to the API server using IP firewall Restrict access of cloud accounts to API server from trusted IP addresses only."},{"location":"techniques/Application%20Exploit%20%28RCE%29/","title":"Application exploit (RCE)","text":"<p>Info</p> <p>ID: MS-TA9009 Tactic: Execution  MITRE technique: T1190</p> <p>An application that is deployed in the cluster and is vulnerable to a remote code execution vulnerability, or a vulnerability that eventually allows code execution, enables attackers to run code in the cluster. If service account is mounted to the container (default behavior in Kubernetes), the attacker will be able to send requests to the API server using this service account credentials.</p>"},{"location":"techniques/Application%20Exploit%20%28RCE%29/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9005 Image Assurance Policy Block vulnerable images MS-M9014 Network Segmentation Limit network access to containers MS-M9011 Restrict Container Runtime using LSM Restrict container runtime capabilities using LSM."},{"location":"techniques/Application%20Vulnerability/","title":"Application vulnerability","text":"<p>Info</p> <p>ID: MS-TA9004 Tactic: Initial Access  MITRE technique: T1190</p> <p>Running a public-facing vulnerable application in a cluster can enable initial access to the cluster. A container that runs an application that is vulnerable to remote code execution vulnerability (RCE) may be exploited. If service account is mounted to the container (default behavior in Kubernetes), the attacker will be able to send requests to the API server using this service account credentials.</p>"},{"location":"techniques/Application%20Vulnerability/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9005 Image Assurance Policy Ensure that only images that passed the security compliance policies are pushed to registries and deployed to Kubernetes clusters. MS-M9007 Network Intrusion Prevention Use network intrusion prevention to block exploiting vulnerabilities."},{"location":"techniques/Application%20credentials%20in%20configuration%20files/","title":"Application credentials in configuration files","text":"<p>Info</p> <p>ID: MS-TA9027 Tactic: Credential Access, Lateral Movement  MITRE technique: T1552</p> <p>Developers store secrets in the Kubernetes configuration files, such as environment variables in the pod configuration. Such behavior is commonly seen in clusters that are monitored by Microsoft Defender for Cloud. Attackers who have access to those configurations, by querying the API server or by accessing those files on the developer\u2019s endpoint, can steal the stored secrets and use them.</p> <p>Using those credentials attackers may gain access to additional resources inside and outside the cluster. </p>"},{"location":"techniques/Application%20credentials%20in%20configuration%20files/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9026 Avoid using plain text credentials Avoid using plain text credentials in Kubernetes configuration MS-M9022 Use Managed Secret Store Store secrets securely in managed secret stores"},{"location":"techniques/Backdoor%20container/","title":"Backdoor container","text":"<p>Info</p> <p>ID: MS-TA9012 Tactic: Persistence  MITRE technique: T1543</p> <p>Attackers run their malicious code in a container in the cluster. By using the Kubernetes controllers such as DaemonSets or Deployments, attackers can ensure that a constant number of containers run in one, or all, the nodes in the cluster.</p>"},{"location":"techniques/Backdoor%20container/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9003 Adhere to least-privilege principle Prevent unnecessary users and service accounts from creating new pods and controllers. MS-M9013 Restrict over permissive containers Restrict over permissive containers in the cluster using admission controller. MS-M9005.003 Gate images deployed to Kubernetes cluster Restrict deployment of new containers from trusted supply chain"},{"location":"techniques/Clear%20container%20logs/","title":"Clear container logs","text":"<p>Info</p> <p>ID: MS-TA9021 Tactic: Defense Evasion  MITRE technique: T1070</p> <p>Attackers may delete the application or OS logs on a compromised container in an attempt to prevent detection of their activity.</p>"},{"location":"techniques/Clear%20container%20logs/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9020 Collect Logs to Remote Data Storage Collect container logs to a separate storage system. MS-M9016 Restrict File and Directory Permissions Restrict access to container logs."},{"location":"techniques/Cluster%20internal%20networking/","title":"Cluster internal networking","text":"<p>Info</p> <p>ID: MS-TA9034 Tactic: Lateral Movement  MITRE technique: T1210</p> <p>Kubernetes networking behavior allows traffic between pods in the cluster as a default behavior. Attackers who gain access to a single container may use it for network reachability to another container in the cluster.</p>"},{"location":"techniques/Cluster%20internal%20networking/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9014 Network Segmentation Provision pod network policies to restrict the traffic between pods MS-M9005 Image Assurance Policy Avoid deployment of vulnerable applications to the cluster"},{"location":"techniques/Cluster-admin%20binding/","title":"Cluster-admin binding","text":"<p>Info</p> <p>ID: MS-TA9019 Tactic: Privilege Escalation  MITRE technique: T1078.003</p> <p>Role-based access control (RBAC) is a key security feature in Kubernetes. RBAC can restrict the allowed actions of the various identities in the cluster. Cluster-admin is a built-in high privileged role in Kubernetes. Attackers who have permissions to create bindings and cluster-bindings in the cluster can create a binding to the cluster-admin ClusterRole or to other high privileges roles.</p>"},{"location":"techniques/Cluster-admin%20binding/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9003 Adhere to least-privilege principle Review privileged role binding and RBAC settings, restrict permissions to configure <code>rolebinding</code> and <code>clusterrolebinding</code>."},{"location":"techniques/Collecting%20Data%20from%20Pod/","title":"Collecting data from pod","text":"<p>Info</p> <p>ID: MS-TA9041 Tactic: Collection  MITRE technique: </p> <p>Using Kubernetes administrative commands an attacker can collect information from a pod without having to get direct access to that pod. One example of such a command is <code>kubectl cp</code> which can be used to copy files to and from pods. </p> <p>Another example is Kubelet Checkpoint API which can be used to create a stateful copy of a running container. Typically a checkpoint contains all memory pages of all processes in the checkpoint container. This means that everything that used to be in memory is now available on the local disk. This includes all private data and possibly keys used for encryption.</p>"},{"location":"techniques/Collecting%20Data%20from%20Pod/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9003 Adhere to least-privilege principle Adhere to least-privilege principle to prevent users from checkpoint or running kubectl cp commands. <code>kubectl cp</code> wraps exec command which runs a tar process. Preventing exec into a container would effectively restrict <code>kubectl cp</code> command. MS-M9010 Restrict Exec Commands on Pods Restrict checkpoint and other commands on pods using admissions controller."},{"location":"techniques/Compromised%20Image%20In%20Registry/","title":"Compromised image In registry","text":"<p>Info</p> <p>ID: MS-TA9002 Tactic: Initial Access  MITRE technique: T1195.002, T1525</p> <p>Running a compromised image in a cluster can compromise the cluster. Attackers who get access to a private registry can plant their own compromised images in the registry. The latter can then be pulled by a user. In addition, users often use untrusted images from public registries (such as Docker Hub) that may be malicious.</p>"},{"location":"techniques/Compromised%20Image%20In%20Registry/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9004 Secure CI/CD environment Placing gates in the CI\\CD process can block pushing unsecured code to container images. MS-M9005 Image Assurance Policy Ensure that only images that passed the security compliance policies are pushed to registries and deployed to Kubernetes clusters."},{"location":"techniques/Connect%20from%20Proxy%20server/","title":"Connect from proxy server","text":"<p>Info</p> <p>ID: MS-TA9024 Tactic: Defense Evasion  MITRE technique: T1090</p> <p>Attackers may use proxy servers to hide their origin IP. Specifically, attackers often use anonymous networks such as TOR for their activity. This can be used for communicating with the applications themselves or with the API server.</p>"},{"location":"techniques/Connect%20from%20Proxy%20server/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9002 Restrict access to the API server using IP firewall Restrict access to the API server from known IP addresses MS-M9014 Network Segmentation Limit network access from known proxy networks. MS-M9021 Restrict the usage of unauthenticated APIs in the cluster Restrict unauthenticated API to the Kubernetes API server. MS-M9009 Require Strong Authentication to Services Limit usage of kubeconfig authentication to the API server"},{"location":"techniques/CoreDNS%20poisoning/","title":"CoreDNS poisoning","text":"<p>Info</p> <p>ID: MS-TA9035 Tactic: Lateral Movement  MITRE technique: T1557</p> <p>CoreDNS is a modular Domain Name System (DNS) server written in Go, hosted by Cloud Native Computing Foundation (CNCF). CoreDNS is the main DNS service that is being used in Kubernetes. The configuration of CoreDNS can be modified by a file named corefile. In Kubernetes, this file is stored in a ConfigMap object, located at the kube-system namespace. If attackers have permissions to modify the ConfigMap, for example by using the container\u2019s service account, they can change the behavior of the cluster\u2019s DNS, poison it, and take the network identity of other services.</p>"},{"location":"techniques/CoreDNS%20poisoning/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9003 Adhere to least-privilege principle Limit updates permissions to the CoreDNS ConfigMap object."},{"location":"techniques/Data%20destruction/","title":"Data destruction","text":"<p>Info</p> <p>ID: MS-TA9038 Tactic: Impact  MITRE technique: T1485</p> <p>Attackers may attempt to destroy data and resources in the cluster. This includes deleting deployments, configurations, storage, and compute resources.</p>"},{"location":"techniques/Data%20destruction/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9030 Use Cloud Storage Provider Use Cloud Storage provider to persist application data. MS-M9031 Implement Data Backup Strategy Backup pod mounted volumes for critical workloads."},{"location":"techniques/Delete%20K8S%20events/","title":"Delete Kubernetes events","text":"<p>Info</p> <p>ID: MS-TA9022 Tactic: Defense Evasion  MITRE technique: T1070</p> <p>A Kubernetes event is a Kubernetes object that logs state changes and failures of the resources in the cluster. Example events are a container creation, an image pull, or a pod scheduling on a node.</p> <p>Kubernetes events can be very useful for identifying changes that occur in the cluster. Therefore, attackers may want to delete these events (e.g., by using: \u201ckubectl delete events\u2013all\u201d) in an attempt to avoid detection of their activity in the cluster.</p>"},{"location":"techniques/Delete%20K8S%20events/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9020 Collect Logs to Remote Data Storage Collect Kubernetes logs to a separate storage system. MS-M9003 Adhere to least-privilege principle Restrict permissions to delete Kubernetes events."},{"location":"techniques/Denial%20of%20service/","title":"Denial of service","text":"<p>Info</p> <p>ID: MS-TA9040 Tactic: Impact  MITRE technique: T1498, T1499</p> <p>Attackers may attempt to perform a denial of service attack, which makes the service unavailable to the legitimate users. In container clusters, this include attempts to block the availability of the containers themselves, the underlying nodes, or the API server.</p>"},{"location":"techniques/Denial%20of%20service/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9011 Restrict Container Runtime using LSM Restrict execution of unwanted processes in containers. MS-M9002 Restrict access to the API server using IP firewall Restrict access to the API server from known IP addresses. MS-M9029 Set requests and limits for containers Limit compute resources for containers."},{"location":"techniques/Exec%20into%20container/","title":"Exec into container","text":"<p>Info</p> <p>ID: MS-TA9006 Tactic: Execution  MITRE technique: T1609</p> <p>Attackers who have permissions, can run malicious commands in containers in the cluster using exec command (\u201ckubectl exec\u201d). In this method, attackers can use legitimate images, such as an OS image (e.g., Ubuntu) as a backdoor container, and run their malicious code remotely by using \u201ckubectl exec\u201d.</p>"},{"location":"techniques/Exec%20into%20container/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9003 Adhere to least-privilege principle Adhere to least-privilege principle to prevent users from exec into containers MS-M9010 Restrict Exec Commands on Pods Restrict exec commands on pods using admissions controller. MS-M9011 Restrict Container Runtime using LSM Restrict container runtime capabilities using LSM."},{"location":"techniques/Exposed%20sensitive%20interfaces/","title":"Exposed sensitive interfaces","text":"<p>Info</p> <p>ID: MS-TA9005 Tactic: Initial Access, Discovery  MITRE technique: T1133</p> <p>Exposing a sensitive interface to the internet or within a cluster without strong authentication poses a security risk. Some popular cluster management services were not intended to be exposed to the internet, and therefore don\u2019t require authentication by default. Thus, exposing such services to the internet allows unauthenticated access to a sensitive interface which might enable running code or deploying containers in the cluster by a malicious actor. Examples of such interfaces that were seen exploited include Apache NiFi, Kubeflow, Argo Workflows, Weave Scope, and the Kubernetes dashboard.</p> <p>In addition, having such services exposed within the cluster network without strong authentication can also allow an attacker to collect information about other workloads deployed to the cluster. The Kubernetes dashboard is an example of such a service that is used for monitoring and managing the Kubernetes cluster. The dashboard allows users to perform actions in the cluster using its service account (kubernetes-dashboard) with permissions that are determined by the binding or cluster-binding for this service account. Attackers who gain access to a container in the cluster, can use its network access to the dashboard pod. Consequently, attackers may retrieve information about the various resources in the cluster using the dashboard\u2019s identity.</p>"},{"location":"techniques/Exposed%20sensitive%20interfaces/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9008 Limit Access to Services Over Network Limit access to sensitive interface over the Internet MS-M9009 Require Strong Authentication to Services Require strong authentication to exposed services MS-M9014 Network Segmentation Restrict network access to the sensitive interfaces."},{"location":"techniques/Instance%20Metadata%20API/","title":"Instance Metadata API","text":"<p>Info</p> <p>ID: MS-TA9033 Tactic: Discovery  MITRE technique: T1552.005</p> <p>Cloud providers provide instance metadata service for retrieving information about the virtual machine, such as network configuration, disks, and SSH public keys. This service is accessible to the VMs via a non-routable IP address that can be accessed from within the VM only. Attackers who gain access to a container, may query the metadata API service for getting information about the underlying node. For example, in Azure, the following request would retrieve all the metadata information of an instance: http:///metadata/instance?api-version=2019-06-01</p>"},{"location":"techniques/Instance%20Metadata%20API/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9018 Restricting cloud metadata API access Restrict the access of pods to IMDS"},{"location":"techniques/Kubeconfig%20file/","title":"Kubeconfig file","text":"<p>Info</p> <p>ID: MS-TA9003 Tactic: Initial Access  MITRE technique: </p> <p>The kubeconfig file, also used by kubectl, contains details about Kubernetes clusters including their location and credentials. If the cluster is hosted as a cloud service (such as AKS or GKE), this file is downloaded to the client via cloud commands (e.g., <code>az aks get-credential</code> for AKS or <code>gcloud container clusters get-credentials</code> for GKE).</p> <p>If attackers get access to this file, for instance via a compromised client, they can use it for accessing the clusters.</p>"},{"location":"techniques/Kubeconfig%20file/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9003 Adhere to least-privilege principle Limit privileges and actions that can be achieved by getting access to a kubeconfig file MS-M9002 Restrict access to the API server using IP firewall Restrict access to the API server from known IP addresses MS-M9006 Enable Just In Time access to API server Enable JIT elevated access to API server to limit attack surface or impact."},{"location":"techniques/Kubernetes%20CronJob/","title":"Kubernetes CronJob","text":"<p>Info</p> <p>ID: MS-TA9014 Tactic: Persistence  MITRE technique: T1053.007</p> <p>Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate. Kubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs. Attackers may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster.</p>"},{"location":"techniques/Kubernetes%20CronJob/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9005.003 Gate images deployed to Kubernetes cluster Restrict deployment of new containers from trusted supply chain MS-M9003 Adhere to least-privilege principle Prevent unnecessary users and service accounts from creating new cronjobs. MS-M9013 Restrict over permissive containers Check cronjob pod template for sensitive mounts and excessive permissions."},{"location":"techniques/List%20K8S%20secrets/","title":"List Kubernetes secrets","text":"<p>Info</p> <p>ID: MS-TA9025 Tactic: Credential Access  MITRE technique: T1552.007</p> <p>A Kubernetes secret is an object that lets users store and manage sensitive information, such as passwords and connection strings in the cluster. Secrets can be consumed by reference in the pod configuration. Attackers who have permissions to retrieve the secrets from the API server (by using the pod service account, for example) can access sensitive information that might include credentials to various services.</p>"},{"location":"techniques/List%20K8S%20secrets/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9003 Adhere to least-privilege principle Limit users and service accounts access to Kubernetes secrets. MS-M9022 Use Managed Secret Store Use cloud provider secret store to securely manage credentials in the cluster MS-M9023 Remove unused secrets objects from the cluster Remove unused secrets from the cluster. MS-M9024 Restrict access to etcd Restrict access to etcd."},{"location":"techniques/Malicious%20admission%20controller/","title":"Malicious admission controller","text":"<p>Info</p> <p>ID: MS-TA9015 Tactic: Persistence, Credential Access  MITRE technique: T1546</p> <p>Admission controller is a Kubernetes component that intercepts, and possibly modifies, requests to the Kubernetes API server. There are two types of admissions controllers: validating and mutating controllers. As the name implies, a mutating admission controller can modify the intercepted request and change its properties. Kubernetes has a built-in generic admission controller named MutatingAdmissionWebhook. The behavior of this admission controller is determined by an admission webhook that the user deploys in the cluster. Attackers can use such webhooks for gaining persistence in the cluster. For example, attackers can intercept and modify the pod creation operations in the cluster and add their malicious container to every created pod.</p>"},{"location":"techniques/Malicious%20admission%20controller/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9003 Adhere to least-privilege principle Restrict permissions to deploy or modify <code>MutatingAdmissionWebhook</code> and <code>ValidatingAdmissionWebhook</code> objects."},{"location":"techniques/Mount%20service%20principal/","title":"Mount service principal","text":"<p>Info</p> <p>ID: MS-TA9026 Tactic: Credential Access  MITRE technique: T1552.001</p> <p>When the cluster is deployed in the cloud, in some cases attackers can leverage their access to a container in the cluster to gain cloud credentials. For example, in AKS each node contains service principal credential.</p>"},{"location":"techniques/Mount%20service%20principal/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9013 Restrict over permissive containers Block sensitive volume mounts using admission controller MS-M9003 Adhere to least-privilege principle Grant minimal required permissions to service principals"},{"location":"techniques/Network%20mapping/","title":"Network mapping","text":"<p>Info</p> <p>ID: MS-TA9031 Tactic: Discovery  MITRE technique: T1046</p> <p>Attackers may try to map the cluster network to get information on the running applications, including scanning for known vulnerabilities. By default, there is no restriction on pods communication in Kubernetes. Therefore, attackers who gain access to a single container, may use it to probe the network.</p>"},{"location":"techniques/Network%20mapping/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9014 Network Segmentation Restrict network between pods using network policies"},{"location":"techniques/New%20Container/","title":"New container","text":"<p>Info</p> <p>ID: MS-TA9008 Tactic: Execution  MITRE technique: T1610</p> <p>Attackers may attempt to run their code in the cluster by deploying a container. Attackers who have permissions to deploy a pod or a controller in the cluster (such as DaemonSet \\ ReplicaSet\\ Deployment) can create a new resource for running their code.</p>"},{"location":"techniques/New%20Container/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9003 Adhere to least-privilege principle Prevent unnecessary users and service accounts from creating new pods and controllers. MS-M9013 Restrict over permissive containers Restrict over permissive containers in the cluster using admission controller. MS-M9005.003 Gate images deployed to Kubenertes cluster Restrict deployment of new containers from trusted supply chain"},{"location":"techniques/Pod%20or%20container%20name%20similarily/","title":"Pod or container name similarity","text":"<p>Info</p> <p>ID: MS-TA9023 Tactic: Defense Evasion  MITRE technique: T1036.005</p> <p>Pods that are created by controllers such as Deployment or DaemonSet have random suffix in their names. Attackers can use this fact and name their backdoor pods as they were created by the existing controllers. For example, an attacker could create a malicious pod named coredns-{random suffix} which would look related to the CoreDNS Deployment.</p> <p>Also, attackers can deploy their containers in the kube-system namespace where the administrative containers reside.</p>"},{"location":"techniques/Pod%20or%20container%20name%20similarily/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9005.003 Gate images deployed to Kubernetes cluster Restrict deployment of new containers from trusted supply chain"},{"location":"techniques/Privileged%20container/","title":"Privileged container","text":"<p>Info</p> <p>ID: MS-TA9018 Tactic: Privilege Escalation  MITRE technique: T1610</p> <p>A privileged container is a container that has all the capabilities of the host machine, which lifts all the limitations regular containers have. Practically, this means that privileged containers can do almost every action that can be performed directly on the host. Attackers who gain access to a privileged container, or have permissions to create a new privileged container (by using the compromised pod\u2019s service account, for example), can get access to the host\u2019s resources.</p>"},{"location":"techniques/Privileged%20container/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9013 Restrict over permissive containers Block privileged containers using admission controller. MS-M9017 Ensure that pods meet defined Pod Security Standards Restrict privileged containers using pod security standards. MS-M9005.003 Gate images deployed to Kubernetes cluster Restrict deployment of new containers from trusted supply chain"},{"location":"techniques/Resource%20hijacking/","title":"Resource hijacking","text":"<p>Info</p> <p>ID: MS-TA9039 Tactic: Impact  MITRE technique: T1496</p> <p>Attackers may abuse a compromised resource for running tasks. A common abuse is to use compromised resources for running digital currency mining. Attackers who have access to a container in the cluster or have permissions to create new containers may use them for such activity.</p>"},{"location":"techniques/Resource%20hijacking/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9011 Restrict Container Runtime using LSM Restrict execution of unwanted processes in containers. MS-M9012 Remove Tools from Container Images Remove unused tools from the container image."},{"location":"techniques/SSH%20server%20running%20inside%20container/","title":"SSH server running inside container","text":"<p>Info</p> <p>ID: MS-TA9010 Tactic: Execution  MITRE technique: </p> <p>SSH server that is running inside a container may be used by attackers. If attackers gain valid credentials to a container, whether by brute force attempts or by other methods (such as phishing), they can use it to get remote access to the container by SSH.</p>"},{"location":"techniques/SSH%20server%20running%20inside%20container/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9015 Avoid Running Management Interface on Containers Avoid running SSH daemon on containers MS-M9014 Network Segmentation Limit network access to containers MS-M9011 Restrict Container Runtime using LSM Limit which process can open network socket on a container."},{"location":"techniques/Sidecar%20Injection/","title":"Sidecar injection","text":"<p>Info</p> <p>ID: MS-TA9011 Tactic: Execution  MITRE technique: T1610</p> <p>A Kubernetes Pod is a group of one or more containers with shared storage and network resources. Sidecar container is a term that is used to describe an additional container that resides alongside the main container. For example, service-mesh proxies are operating as sidecars in the applications\u2019 pods. Attackers can run their code and hide their activity by injecting a sidecar container to a legitimate pod in the cluster instead of running their own separated pod in the cluster.</p>"},{"location":"techniques/Sidecar%20Injection/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9003 Adhere to least-privilege principle Prevent unnecessary users and service accounts from creating new pods and controllers. MS-M9013 Restrict over permissive containers Restrict over permissive containers in the cluster using admission controller. MS-M9005.003 Gate images deployed to Kubernetes cluster Restrict deployment of new containers from trusted supply chain"},{"location":"techniques/Static%20Pods/","title":"Static pods","text":"<p>Info</p> <p>ID: MS-TA9017 Tactic: Persistence  MITRE technique: </p> <p>Static Pods are created and managed by the the kubelet daemon on each node, without the API server observing them. Kubelet watches each static pod and restart it if it fails.  </p> <p>Kubelet automatically tries to create a mirror pod on the Kubernetes API server to represent the static pods, so it will be visible on the API server, however the pods cannot be controlled from there.</p> <p>Static Pods are created based on a web or local filesystem YAML files which kubelet observes for changes. An attacker can use the static pods manifest file to ensure that a pod is always running on a cluster node and prevent it from being changed or deleted from the Kubernetes API server.</p>"},{"location":"techniques/Static%20Pods/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9016 Restrict File and Directory Permissions Restrict write access to the static pods manifest folder. MS-M9032 Avoid using web-hosted manifest for Kubelet Avoid using web-hosted manifest for Kubelet."},{"location":"techniques/Using%20Cloud%20Credentials/","title":"Using cloud credentials","text":"<p>Info</p> <p>ID: MS-TA9001 Tactic: Initial Access  MITRE technique: T1078.004</p> <p>In cases where the Kubernetes cluster is deployed in a public cloud (e.g., AKS in Azure, GKE in GCP, or EKS in AWS), compromised cloud credential can lead to cluster takeover. Attackers who have access to the cloud account credentials can get access to the cluster\u2019s management layer.</p>"},{"location":"techniques/Using%20Cloud%20Credentials/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9001 Multi-factor Authentication Use multi-factor authentication for cloud accounts which can be elevated to access Kubernetes clusters in that cloud. MS-M9002 Restrict access to the API server using IP firewall Restrict access of cloud accounts to API server from trusted IP addresses only. MS-M9003 Adhere to least-privilege principle Limit RBAC privileges in the cloud account to retrieve access credentials to managed Kubernetes clusters."},{"location":"techniques/Writable%20hostPath%20mount/","title":"Writable hostPath mount","text":"<p>Info</p> <p>ID: MS-TA9013 Tactic: Persistence, Privilege Escalation, Lateral Movement  MITRE technique: T1611</p> <p>hostPath volume mounts a directory or a file from the host to the container. Attackers who have permissions to create a new container in the cluster may create one with a writable hostPath volume and gain persistence on the underlying host. For example, the latter can be achieved by creating a cron job on the host.</p>"},{"location":"techniques/Writable%20hostPath%20mount/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9013 Restrict over permissive containers Block sensitive volume mounts using admission controller. MS-M9016 Restrict File and Directory Permissions Use read-only volumes. MS-M9011 Restrict Container Runtime using LSM Use AppArmor to restrict file writing. MS-M9017 Ensure that pods meet defined Pod Security Standards Use <code>Baseline</code> or <code>Restricted</code> pod security standards to prevent exploiting writable hostPath mount."},{"location":"techniques/bash%20or%20cmd%20inside%20container/","title":"Bash or cmd inside container","text":"<p>Info</p> <p>ID: MS-TA9007  Tactic: Execution  MITRE technique: T1059</p> <p>Attackers who have permissions to run a cmd/bash script inside a container can use it to execute malicious code and compromise cluster resources.</p>"},{"location":"techniques/bash%20or%20cmd%20inside%20container/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9011 Restrict Container Runtime using LSM Restrict container runtime capabilities using LSM. MS-M9012 Remove Tools from Container Images Remove bash and other terminals from container images."},{"location":"techniques/container%20service%20account/","title":"Container service account","text":"<p>Info</p> <p>ID: MS-TA9016 Tactic: Credential Access, Lateral Movement, Persistence  MITRE technique: T1528</p> <p>Service account (SA) represents an application identity in Kubernetes. By default, a Service Account access token is mounted to every created pod in the cluster and containers in the pod can send requests to the Kubernetes API server using the Service Account credentials. Attackers who get access to a pod can access the Service Account token (located in <code>/var/run/secrets/kubernetes.io/serviceaccount/token</code>) and perform actions in the cluster, according to the Service Account permissions. If RBAC is not enabled, the Service Account has unlimited permissions in the cluster. If RBAC is enabled, its permissions are determined by the RoleBindings \\ ClusterRoleBindings that are associated with it.</p> <p>An attacker which get access to the Service Account token can also authenticate and access the Kubernetes API server from outside the cluster and maintain access to the cluster.</p>"},{"location":"techniques/container%20service%20account/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9025 Disable Service Account Auto Mount Disable service account auto mount. MS-M9003 Adhere to least-privilege principle Configure the Kubernetes RBAC such that each service account will have the minimal necessary permissions for the application\u2019s functionality."},{"location":"techniques/images%20from%20a%20private%20registry/","title":"Images from a private registry","text":"<p>Info</p> <p>ID: MS-TA9037 Tactic: Collection  MITRE technique: T1530</p> <p>The images that are running in the cluster can be stored in a private registry. For pulling those images, the container runtime engine (such as Docker or containerd) needs to have valid credentials to those registries. If the registry is hosted by the cloud provider, in services like Azure Container Registry (ACR) or Amazon Elastic Container Registry (ECR), cloud credentials are used to authenticate to the registry. If attackers get access to the cluster, in some cases they can obtain access to the private registry and pull its images. For example, attackers can use the managed identity token as described in the \u201cAccess managed identity credential\u201d technique. Similarly, in EKS, attackers can use the AmazonEC2ContainerRegistryReadOnly policy that is bound by default to the node\u2019s IAM role.</p>"},{"location":"techniques/images%20from%20a%20private%20registry/#mitigations","title":"Mitigations","text":"ID Mitigation Description MS-M9018 Restricting cloud metadata API access Restrict access to IMDS to prevent authentication with a private registry using cloud identities. MS-M9003 Adhere to least-privilege principle In some configurations, the credentials to private registries are stored as Kubernetes secret. Adhere to least-privilege principle to prevent users from reading image pull secrets."}]}